{
  "id": "d58f9245-5fdf-4863-b612-fb79d949ac60",
  "prevId": "e37d9a9b-0e5d-4365-8750-cd52829037b3",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.challenge_members": {
      "name": "challenge_members",
      "schema": "",
      "columns": {
        "member_id": {
          "name": "member_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "challenge_members_member_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "challenge_id": {
          "name": "challenge_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "sort_seq": {
          "name": "sort_seq",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "joined_at": {
          "name": "joined_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "challenge_members_challenge_id_challenges_challenge_id_fk": {
          "name": "challenge_members_challenge_id_challenges_challenge_id_fk",
          "tableFrom": "challenge_members",
          "tableTo": "challenges",
          "columnsFrom": [
            "challenge_id"
          ],
          "columnsTo": [
            "challenge_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "challenge_members_profile_id_profiles_profile_id_fk": {
          "name": "challenge_members_profile_id_profiles_profile_id_fk",
          "tableFrom": "challenge_members",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-challenge-members-policy": {
          "name": "select-challenge-members-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"challenge_members\".\"profile_id\""
        },
        "insert-challenge-members-policy": {
          "name": "insert-challenge-members-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"challenge_members\".\"profile_id\""
        },
        "update-challenge-members-policy": {
          "name": "update-challenge-members-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"challenge_members\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"challenge_members\".\"profile_id\""
        },
        "delete-challenge-members-policy": {
          "name": "delete-challenge-members-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"challenge_members\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.challenge_submits": {
      "name": "challenge_submits",
      "schema": "",
      "columns": {
        "submit_id": {
          "name": "submit_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "challenge_submits_submit_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "challenge_id": {
          "name": "challenge_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "sort_seq": {
          "name": "sort_seq",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "submit_ctt": {
          "name": "submit_ctt",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "submitted_at": {
          "name": "submitted_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "challenge_submits_challenge_id_challenges_challenge_id_fk": {
          "name": "challenge_submits_challenge_id_challenges_challenge_id_fk",
          "tableFrom": "challenge_submits",
          "tableTo": "challenges",
          "columnsFrom": [
            "challenge_id"
          ],
          "columnsTo": [
            "challenge_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "challenge_submits_profile_id_profiles_profile_id_fk": {
          "name": "challenge_submits_profile_id_profiles_profile_id_fk",
          "tableFrom": "challenge_submits",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-challenge-submits-policy": {
          "name": "select-challenge-submits-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"challenge_submits\".\"profile_id\""
        },
        "insert-challenge-submits-policy": {
          "name": "insert-challenge-submits-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"challenge_submits\".\"profile_id\""
        },
        "update-challenge-submits-policy": {
          "name": "update-challenge-submits-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"challenge_submits\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"challenge_submits\".\"profile_id\""
        },
        "delete-challenge-submits-policy": {
          "name": "delete-challenge-submits-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"challenge_submits\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.challenges": {
      "name": "challenges",
      "schema": "",
      "columns": {
        "challenge_id": {
          "name": "challenge_id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "challenge_ttl": {
          "name": "challenge_ttl",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "challenge_ctt": {
          "name": "challenge_ctt",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "start_date": {
          "name": "start_date",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "end_date": {
          "name": "end_date",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "max_member_cnt": {
          "name": "max_member_cnt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "now_member_cnt": {
          "name": "now_member_cnt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-challenges-policy": {
          "name": "select-challenges-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "insert-challenges-policy": {
          "name": "insert-challenges-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "update-challenges-policy": {
          "name": "update-challenges-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'",
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "delete-challenges-policy": {
          "name": "delete-challenges-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.payments": {
      "name": "payments",
      "schema": "",
      "columns": {
        "payment_id": {
          "name": "payment_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "payments_payment_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "payment_key": {
          "name": "payment_key",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "order_id": {
          "name": "order_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "order_name": {
          "name": "order_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "total_amount": {
          "name": "total_amount",
          "type": "double precision",
          "primaryKey": false,
          "notNull": true
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "raw_data": {
          "name": "raw_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "receipt_url": {
          "name": "receipt_url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "approved_at": {
          "name": "approved_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "requested_at": {
          "name": "requested_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "payments_user_id_users_id_fk": {
          "name": "payments_user_id_users_id_fk",
          "tableFrom": "payments",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-payment-policy": {
          "name": "select-payment-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"payments\".\"user_id\""
        },
        "insert-payment-policy": {
          "name": "insert-payment-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"payments\".\"user_id\""
        },
        "update-payment-policy": {
          "name": "update-payment-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"payments\".\"user_id\"",
          "withCheck": "(select auth.uid()) = \"payments\".\"user_id\""
        },
        "delete-payment-policy": {
          "name": "delete-payment-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"payments\".\"user_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.notifications": {
      "name": "notifications",
      "schema": "",
      "columns": {
        "notification_id": {
          "name": "notification_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "notifications_notification_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "notification_type": {
          "name": "notification_type",
          "type": "notification_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "notification_content": {
          "name": "notification_content",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "notifications_profile_id_profiles_profile_id_fk": {
          "name": "notifications_profile_id_profiles_profile_id_fk",
          "tableFrom": "notifications",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-notifications-policy": {
          "name": "select-notifications-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"notifications\".\"profile_id\""
        },
        "insert-notifications-policy": {
          "name": "insert-notifications-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"notifications\".\"profile_id\""
        },
        "update-notifications-policy": {
          "name": "update-notifications-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"notifications\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"notifications\".\"profile_id\""
        },
        "delete-notifications-policy": {
          "name": "delete-notifications-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"notifications\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.trend_keywords": {
      "name": "trend_keywords",
      "schema": "",
      "columns": {
        "trend_keyword_id": {
          "name": "trend_keyword_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "trend_keywords_trend_keyword_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "sort_seq": {
          "name": "sort_seq",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "trend_keyword": {
          "name": "trend_keyword",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "trend_keyword_rank": {
          "name": "trend_keyword_rank",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-trend-keywords-policy": {
          "name": "select-trend-keywords-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "insert-trend-keywords-policy": {
          "name": "insert-trend-keywords-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "update-trend-keywords-policy": {
          "name": "update-trend-keywords-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'",
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "delete-trend-keywords-policy": {
          "name": "delete-trend-keywords-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.trends": {
      "name": "trends",
      "schema": "",
      "columns": {
        "trend_id": {
          "name": "trend_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "trends_trend_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "trend_date": {
          "name": "trend_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "trend_content": {
          "name": "trend_content",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "trend_type": {
          "name": "trend_type",
          "type": "trend_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "trend_rank": {
          "name": "trend_rank",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "trend_keyword_id": {
          "name": "trend_keyword_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "trends_trend_keyword_id_trend_keywords_trend_keyword_id_fk": {
          "name": "trends_trend_keyword_id_trend_keywords_trend_keyword_id_fk",
          "tableFrom": "trends",
          "tableTo": "trend_keywords",
          "columnsFrom": [
            "trend_keyword_id"
          ],
          "columnsTo": [
            "trend_keyword_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-trends-policy": {
          "name": "select-trends-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "insert-trends-policy": {
          "name": "insert-trends-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "update-trends-policy": {
          "name": "update-trends-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'",
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "delete-trends-policy": {
          "name": "delete-trends-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "marketing_consent": {
          "name": "marketing_consent",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "profiles_profile_id_users_id_fk": {
          "name": "profiles_profile_id_users_id_fk",
          "tableFrom": "profiles",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "edit-profile-policy": {
          "name": "edit-profile-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"profiles\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"profiles\".\"profile_id\""
        },
        "delete-profile-policy": {
          "name": "delete-profile-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"profiles\".\"profile_id\""
        },
        "select-profile-policy": {
          "name": "select-profile-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"profiles\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.setting": {
      "name": "setting",
      "schema": "",
      "columns": {
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "theme": {
          "name": "theme",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'dark'"
        },
        "font_size": {
          "name": "font_size",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'default'"
        },
        "color_blind_mode": {
          "name": "color_blind_mode",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "setting_profile_id_profiles_profile_id_fk": {
          "name": "setting_profile_id_profiles_profile_id_fk",
          "tableFrom": "setting",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "insert-setting-policy": {
          "name": "insert-setting-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"setting\".\"profile_id\""
        },
        "edit-setting-policy": {
          "name": "edit-setting-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"setting\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"setting\".\"profile_id\""
        },
        "delete-setting-policy": {
          "name": "delete-setting-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"setting\".\"profile_id\""
        },
        "select-setting-policy": {
          "name": "select-setting-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"setting\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.sns_profiles": {
      "name": "sns_profiles",
      "schema": "",
      "columns": {
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "target_type": {
          "name": "target_type",
          "type": "target_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "access_token": {
          "name": "access_token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "sns_profiles_profile_id_profiles_profile_id_fk": {
          "name": "sns_profiles_profile_id_profiles_profile_id_fk",
          "tableFrom": "sns_profiles",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "insert-sns-profile-policy": {
          "name": "insert-sns-profile-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"sns_profiles\".\"profile_id\""
        },
        "edit-sns-profile-policy": {
          "name": "edit-sns-profile-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"sns_profiles\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"sns_profiles\".\"profile_id\""
        },
        "delete-sns-profile-policy": {
          "name": "delete-sns-profile-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"sns_profiles\".\"profile_id\""
        },
        "select-sns-profile-policy": {
          "name": "select-sns-profile-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"sns_profiles\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_insights": {
      "name": "user_insights",
      "schema": "",
      "columns": {
        "insight_id": {
          "name": "insight_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "user_insights_insight_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "thread_id": {
          "name": "thread_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "metric_name": {
          "name": "metric_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "metric_type": {
          "name": "metric_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "period": {
          "name": "period",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "value": {
          "name": "value",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "end_time": {
          "name": "end_time",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "profile_thread_idx": {
          "name": "profile_thread_idx",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "thread_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "metric_idx": {
          "name": "metric_idx",
          "columns": [
            {
              "expression": "metric_name",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "end_time_idx": {
          "name": "end_time_idx",
          "columns": [
            {
              "expression": "end_time",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_insights_profile_id_profiles_profile_id_fk": {
          "name": "user_insights_profile_id_profiles_profile_id_fk",
          "tableFrom": "user_insights",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-user-insights-policy": {
          "name": "select-user-insights-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"user_insights\".\"profile_id\""
        },
        "insert-user-insights-policy": {
          "name": "insert-user-insights-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"user_insights\".\"profile_id\""
        },
        "update-user-insights-policy": {
          "name": "update-user-insights-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"user_insights\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"user_insights\".\"profile_id\""
        },
        "delete-user-insights-policy": {
          "name": "delete-user-insights-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"user_insights\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_metrics": {
      "name": "user_metrics",
      "schema": "",
      "columns": {
        "metric_id": {
          "name": "metric_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "user_metrics_metric_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "metric_name": {
          "name": "metric_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "total_value": {
          "name": "total_value",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "last_updated": {
          "name": "last_updated",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "profile_metric_idx": {
          "name": "profile_metric_idx",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "metric_name",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_metrics_profile_id_profiles_profile_id_fk": {
          "name": "user_metrics_profile_id_profiles_profile_id_fk",
          "tableFrom": "user_metrics",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-user-metrics-policy": {
          "name": "select-user-metrics-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"user_metrics\".\"profile_id\""
        },
        "insert-user-metrics-policy": {
          "name": "insert-user-metrics-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"user_metrics\".\"profile_id\""
        },
        "update-user-metrics-policy": {
          "name": "update-user-metrics-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"user_metrics\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"user_metrics\".\"profile_id\""
        },
        "delete-user-metrics-policy": {
          "name": "delete-user-metrics-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"user_metrics\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.keywords": {
      "name": "keywords",
      "schema": "",
      "columns": {
        "keyword_id": {
          "name": "keyword_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "keywords_keyword_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "sort_seq": {
          "name": "sort_seq",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "keyword": {
          "name": "keyword",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "keyword_idx": {
          "name": "keyword_idx",
          "columns": [
            {
              "expression": "keyword",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-keywords-policy": {
          "name": "select-keywords-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "insert-keywords-policy": {
          "name": "insert-keywords-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "update-keywords-policy": {
          "name": "update-keywords-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'",
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "delete-keywords-policy": {
          "name": "delete-keywords-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.properties": {
      "name": "properties",
      "schema": "",
      "columns": {
        "property_id": {
          "name": "property_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "properties_property_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "sort_seq": {
          "name": "sort_seq",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "property_type": {
          "name": "property_type",
          "type": "property_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "property": {
          "name": "property",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "property_idx": {
          "name": "property_idx",
          "columns": [
            {
              "expression": "property",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "property_type_idx": {
          "name": "property_type_idx",
          "columns": [
            {
              "expression": "property_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-properties-policy": {
          "name": "select-properties-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "insert-properties-policy": {
          "name": "insert-properties-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "update-properties-policy": {
          "name": "update-properties-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'",
          "withCheck": "auth.jwt() ->> 'role' = 'admin'"
        },
        "delete-properties-policy": {
          "name": "delete-properties-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "auth.jwt() ->> 'role' = 'admin'"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.thread_keywords": {
      "name": "thread_keywords",
      "schema": "",
      "columns": {
        "thread_id": {
          "name": "thread_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "keyword_id": {
          "name": "keyword_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "thread_keywords_thread_id_threads_thread_id_fk": {
          "name": "thread_keywords_thread_id_threads_thread_id_fk",
          "tableFrom": "thread_keywords",
          "tableTo": "threads",
          "columnsFrom": [
            "thread_id"
          ],
          "columnsTo": [
            "thread_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "thread_keywords_keyword_id_keywords_keyword_id_fk": {
          "name": "thread_keywords_keyword_id_keywords_keyword_id_fk",
          "tableFrom": "thread_keywords",
          "tableTo": "keywords",
          "columnsFrom": [
            "keyword_id"
          ],
          "columnsTo": [
            "keyword_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "thread_keywords_thread_id_keyword_id_pk": {
          "name": "thread_keywords_thread_id_keyword_id_pk",
          "columns": [
            "thread_id",
            "keyword_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {
        "select-thread-keywords-policy": {
          "name": "select-thread-keywords-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "EXISTS (\n        SELECT 1 FROM threads \n        WHERE threads.thread_id = \"thread_keywords\".\"thread_id\" \n        AND threads.profile_id = (select auth.uid())\n      )"
        },
        "insert-thread-keywords-policy": {
          "name": "insert-thread-keywords-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "EXISTS (\n        SELECT 1 FROM threads \n        WHERE threads.thread_id = \"thread_keywords\".\"thread_id\" \n        AND threads.profile_id = (select auth.uid())\n      )"
        },
        "delete-thread-keywords-policy": {
          "name": "delete-thread-keywords-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "EXISTS (\n        SELECT 1 FROM threads \n        WHERE threads.thread_id = \"thread_keywords\".\"thread_id\" \n        AND threads.profile_id = (select auth.uid())\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.thread_media": {
      "name": "thread_media",
      "schema": "",
      "columns": {
        "media_id": {
          "name": "media_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "thread_media_media_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "thread_id": {
          "name": "thread_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "media_type": {
          "name": "media_type",
          "type": "media_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "original_filename": {
          "name": "original_filename",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "public_url": {
          "name": "public_url",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "file_size": {
          "name": "file_size",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "mime_type": {
          "name": "mime_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "storage_path": {
          "name": "storage_path",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "thread_media_thread_idx": {
          "name": "thread_media_thread_idx",
          "columns": [
            {
              "expression": "thread_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "thread_media_profile_idx": {
          "name": "thread_media_profile_idx",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "thread_media_type_idx": {
          "name": "thread_media_type_idx",
          "columns": [
            {
              "expression": "media_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "thread_media_thread_id_threads_thread_id_fk": {
          "name": "thread_media_thread_id_threads_thread_id_fk",
          "tableFrom": "thread_media",
          "tableTo": "threads",
          "columnsFrom": [
            "thread_id"
          ],
          "columnsTo": [
            "thread_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "thread_media_profile_id_profiles_profile_id_fk": {
          "name": "thread_media_profile_id_profiles_profile_id_fk",
          "tableFrom": "thread_media",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-thread-media-policy": {
          "name": "select-thread-media-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"thread_media\".\"profile_id\""
        },
        "insert-thread-media-policy": {
          "name": "insert-thread-media-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"thread_media\".\"profile_id\""
        },
        "update-thread-media-policy": {
          "name": "update-thread-media-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"thread_media\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"thread_media\".\"profile_id\""
        },
        "delete-thread-media-policy": {
          "name": "delete-thread-media-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"thread_media\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.thread_properties": {
      "name": "thread_properties",
      "schema": "",
      "columns": {
        "thread_id": {
          "name": "thread_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "property_id": {
          "name": "property_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "thread_properties_thread_id_threads_thread_id_fk": {
          "name": "thread_properties_thread_id_threads_thread_id_fk",
          "tableFrom": "thread_properties",
          "tableTo": "threads",
          "columnsFrom": [
            "thread_id"
          ],
          "columnsTo": [
            "thread_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "thread_properties_property_id_properties_property_id_fk": {
          "name": "thread_properties_property_id_properties_property_id_fk",
          "tableFrom": "thread_properties",
          "tableTo": "properties",
          "columnsFrom": [
            "property_id"
          ],
          "columnsTo": [
            "property_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "thread_properties_thread_id_property_id_pk": {
          "name": "thread_properties_thread_id_property_id_pk",
          "columns": [
            "thread_id",
            "property_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {
        "select-thread-properties-policy": {
          "name": "select-thread-properties-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "EXISTS (\n        SELECT 1 FROM threads \n        WHERE threads.thread_id = \"thread_properties\".\"thread_id\" \n        AND threads.profile_id = (select auth.uid())\n      )"
        },
        "insert-thread-properties-policy": {
          "name": "insert-thread-properties-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "EXISTS (\n        SELECT 1 FROM threads \n        WHERE threads.thread_id = \"thread_properties\".\"thread_id\" \n        AND threads.profile_id = (select auth.uid())\n      )"
        },
        "delete-thread-properties-policy": {
          "name": "delete-thread-properties-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "EXISTS (\n        SELECT 1 FROM threads \n        WHERE threads.thread_id = \"thread_properties\".\"thread_id\" \n        AND threads.profile_id = (select auth.uid())\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.threads": {
      "name": "threads",
      "schema": "",
      "columns": {
        "thread_id": {
          "name": "thread_id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "always",
            "name": "threads_thread_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "short_text": {
          "name": "short_text",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "thread": {
          "name": "thread",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "target_type": {
          "name": "target_type",
          "type": "target_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "send_flag": {
          "name": "send_flag",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "result_id": {
          "name": "result_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "share_cnt": {
          "name": "share_cnt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "like_cnt": {
          "name": "like_cnt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "comment_cnt": {
          "name": "comment_cnt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "view_cnt": {
          "name": "view_cnt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "now_follow_cnt": {
          "name": "now_follow_cnt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "threads_profile_id_profiles_profile_id_fk": {
          "name": "threads_profile_id_profiles_profile_id_fk",
          "tableFrom": "threads",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "profile_id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select-threads-policy": {
          "name": "select-threads-policy",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"threads\".\"profile_id\""
        },
        "insert-threads-policy": {
          "name": "insert-threads-policy",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(select auth.uid()) = \"threads\".\"profile_id\""
        },
        "update-threads-policy": {
          "name": "update-threads-policy",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"threads\".\"profile_id\"",
          "withCheck": "(select auth.uid()) = \"threads\".\"profile_id\""
        },
        "delete-threads-policy": {
          "name": "delete-threads-policy",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(select auth.uid()) = \"threads\".\"profile_id\""
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.notification_type": {
      "name": "notification_type",
      "schema": "public",
      "values": [
        "thread",
        "X",
        "following",
        "challenge"
      ]
    },
    "public.trend_type": {
      "name": "trend_type",
      "schema": "public",
      "values": [
        "trending",
        "topic",
        "users",
        "hot"
      ]
    },
    "public.target_type": {
      "name": "target_type",
      "schema": "public",
      "values": [
        "thread",
        "X"
      ]
    },
    "public.media_type": {
      "name": "media_type",
      "schema": "public",
      "values": [
        "image",
        "video"
      ]
    },
    "public.property_type": {
      "name": "property_type",
      "schema": "public",
      "values": [
        "mood",
        "work"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}